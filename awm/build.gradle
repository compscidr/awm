// bintray howto: https://reflectoring.io/guide-publishing-to-bintray-with-gradle/#create-a-repository
// snapshots howto on oss.jfrog.org: https://reflectoring.io/publish-snapshots-with-gradle/
// releases with jcenter and maven central: https://reflectoring.io/bintray-jcenter-maven-central/

// more info on snapshots
// https://stackoverflow.com/questions/47872069/confused-about-process-to-publish-snapshots-to-bintray

// open source release chain: https://reflectoring.io/fully-automated-open-source-release-chain/
// ci build stages: https://docs.travis-ci.com/user/build-stages/

plugins {
    id 'com.android.library'

    //including this lib didn't work in gradle 4.6, and updating to 4.9 caused a
    //"configuration on demand is not supported" error. Fix is to do this:
    //https://stackoverflow.com/questions/49990933/configuration-on-demand-is-not-supported-by-the-current-version-of-the-android-g/49996317
    id 'digital.wup.android-maven-publish' version '3.6.2'

    id "com.jfrog.bintray" version "1.8.4"
    id "com.jfrog.artifactory" version "4.7.3"
}

group 'io.rightmesh'
System.setProperty("snapshot","no")
version '1.1.10' + (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")

android {
    buildToolsVersion "28.0.3"
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName this.version
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {

        }
    }
}

dependencies {
    //permissions
    implementation 'com.vanniktech:rxpermission:0.4.0'
    implementation 'com.github.anadea:rxbus:1.0.1'

    //play services for location
    implementation ('com.google.android.gms:play-services-location:15.0.1') {
        exclude group: "com.android.support"
    }

    //lombok annotations
    compileOnly 'org.projectlombok:lombok:1.18.4'
    compileOnly 'javax.annotation:javax.annotation-api:1.3.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'

    //unit and integration tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.0"
    testImplementation "org.mockito:mockito-core:2.23.0"
    //testImplementation "org.robolectric:robolectric:3.3.2"
    //testImplementation 'androidx.test:core:1.1.0'
    //testImplementation 'junit:junit:4.12'

    testImplementation "org.mockito:mockito-core:2.23.0"

    //persistence
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'

    //logging
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
}

def pomConfig = {
    licenses {
        license {
            name "The GNU General Public License, Version 3.0"
            url "https://www.gnu.org/licenses/gpl-3.0.en.html"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "compscidr"
            name "Jason Ernst"
            email "ernstjason1@gmail.com"
        }
    }

    scm {
        url "https://github.com/compscidr/awm-lib"
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}


task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing.publications {
    publicLib(MavenPublication) {
        from components.android
        afterEvaluate {
            groupId this.group
            artifactId project.name
            version this.version

            artifact(sourceJar)
            artifact(javadocJar)

            pom.withXml {
                def root = asNode()
                root.appendNode('description', '\t\n' +
                        'Android Wireless Measurement Library aims to collect and open source wireless statistics and information in a way that does not disrupt the functioning of apps.')
                root.appendNode('name', 'Android Wireless Measurement Library')
                root.appendNode('url', 'https://github.com/compscidr/awm-lib')
                root.children().last() + pomConfig
            }
        }
    }
}

repositories {
    google()
    mavenLocal()
    mavenCentral()
    jcenter()
}

bintray {
    user = System.getProperty('bintrayuser')
    key = System.getProperty('bintraykey')
    def pphrase = System.getProperty('gpgpassphrase')
    publications = ['publicLib']

    pkg {
        repo = 'maven'
        name = 'awm'
        userOrg = 'compscidr'
        licenses = ['GPL-3.0']
        websiteUrl = 'https://github.com/compscidr/awm-lib'
        issueTrackerUrl = 'https://github.com/compscidr/awm-lib/issues'
        vcsUrl = 'https://github.com/compscidr/awm-lib.git'
        githubRepo = 'compscidr/awm-lib'

        version {
            name = this.version
            vcsTag = this.version
            desc = this.version
            released  = new Date()
            gpg {
                sign = true
                passphrase = pphrase
            }
        }
    }

    publish = true
}

artifactory {
    contextUrl = 'http://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getProperty('bintrayuser')
            password = System.getProperty('bintraykey')
        }
        defaults {
            publications('publicLib')
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = 'oss-snapshot-local'
    }
    clientConfig.info.setBuildNumber(System.getProperty('build.number'))
}