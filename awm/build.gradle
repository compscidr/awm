group 'com.jasonernst'
version '1.1.23' + (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")

buildscript {
    ext {

    }
    repositories {
        google()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.4'
        classpath "de.mannodermaus.gradle.plugins:android-junit5:1.8.2.0"
        classpath "com.google.dagger:hilt-android-gradle-plugin:2.40.5"
        classpath "com.hiya:jacoco-android:0.2"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'com.hiya.jacoco-android'

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}

android {
    compileSdkVersion 31

    defaultConfig {
        testInstrumentationRunnerArguments
        minSdkVersion 19
        targetSdkVersion 31
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    lintOptions {
        abortOnError false
        warningsAsErrors false
        showAll true
        explainIssues true
        xmlOutput file("build/reports/lint/report.xml")
        htmlOutput file("build/reports/lint/report.html")
        disable "UnsafeExperimentalUsageError",
                "UnsafeExperimentalUsageWarning"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

dependencies {
    implementation 'androidx.test:monitor:1.4.0'
    def multidex_version = "2.0.1"
    def room_version = "2.3.0"
    implementation "androidx.multidex:multidex:$multidex_version"

    //permissions
    implementation 'com.vanniktech:rxpermission:0.7.0'
    api 'com.github.anadea:rxbus:1.0.1'

    implementation "com.google.android.gms:play-services-location:18.0.0"

    //noinspection AnnotationProcessorOnCompilePath
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-android
    implementation group: 'org.slf4j', name: 'slf4j-android', version: '1.7.32'

    //unit and integration tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.8.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
    testImplementation "org.mockito:mockito-core:4.1.0"

    androidTestImplementation("de.mannodermaus.junit5:android-test-core:1.3.0")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:1.3.0")
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-params:5.8.2"
    androidTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
    androidTestImplementation "org.mockito:mockito-core:4.1.0"
    androidTestImplementation "org.mockito:mockito-core:4.1.0"

    //persistence
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    //logging
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    testAnnotationProcessor group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
}


repositories {
    google()
    mavenLocal()
    mavenCentral()
}


task getVersion() {
    print version
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = group
                artifactId = 'awm'
                version = version
            }
            debug(MavenPublication) {
                from components.debug
                groupId = group
                artifactId = 'awm-debug'
                version = version
            }
        }
    }
    task updatePom(type: Copy) {
        from "$buildDir/publications/release/pom-default.xml"
        into "."
        rename ("pom-default.xml", "pom.xml")
        dependsOn(generatePomFileForReleasePublication)
    }
    build.dependsOn(updatePom)
}

apply from: '../checkstyle.gradle'